import os, re
import glob
import shutil
import pandas as pd

##############################
# CONFIG
# can be overwritten by using --configfile <path to config> when calling snakemake
# configfile:"config/config.yaml"

include:
    "rules/init.smk"

NUMBERS = ["01", "02", "03",
    "04",  "05", "06",
    "07", "08", "09",
    "10", "11", "12"]

rule assembly:
    input:
        os.path.join(RESULTS_DIR, "rawReads/concatenated_reads.fastq.gz"),
        os.path.join(RESULTS_DIR, "filteredReads/filtered_reads.fastq"),
        expand(os.path.join(RESULTS_DIR, "subsampledReads/sample_{number}.fastq"), number = NUMBERS),
        expand(os.path.join(RESULTS_DIR, "assemblies/flye_sample_{number}.fasta"), number = ["01", "04", "07", "10"]),
        expand(os.path.join(RESULTS_DIR, "assemblies/canu_sample_{number}.fasta"), number = ["02", "05", "08", "11"]),
        expand(os.path.join(RESULTS_DIR, "assemblies/raven_sample_{number}.fasta"), number = ["03", "06", "09", "12"]),
        os.path.join(RESULTS_DIR, "stats/stats_assemblies.txt")
    # output:
    #     touch("status/preprocessing.done")

rule concatenate_reads:
	input:
		expand(os.path.join(READS_DIR, "{reads}.fastq.gz"), reads = READS)
	output:
		os.path.join(RESULTS_DIR, "rawReads/concatenated_reads.fastq.gz")
	shell:
		"cat {input} > {output}"

rule filter:
    input:
        os.path.join(RESULTS_DIR, "rawReads/concatenated_reads.fastq.gz")
    output:
        os.path.join(RESULTS_DIR, "filteredReads/filtered_reads.fastq")
    conda:
        os.path.join(ENV_DIR, "filtlong.yaml")
    log:
        out=os.path.join(RESULTS_DIR, "logs/filter.out.log"),
        err=os.path.join(RESULTS_DIR, "logs/filter.err.log")
    shell:
        "(date && filtlong --min_length 2000 --keep_percent 90 {input} > {output} && date) 2> {log.err} > {log.out}"

rule subsample:
    input:
        os.path.join(RESULTS_DIR, "filteredReads/filtered_reads.fastq")
    output:
        expand(os.path.join(RESULTS_DIR, "subsampledReads/sample_{number}.fastq"), number = NUMBERS)
    conda:
        os.path.join(ENV_DIR, "trycycler.yaml")
    params:
        folder = os.path.join(RESULTS_DIR, "subsampledReads"),
        size = config["subsample"]["genome_size"]
    log:
        out=os.path.join(RESULTS_DIR, "logs/subsample.out.log"),
        err=os.path.join(RESULTS_DIR, "logs/subsample.err.log")
    shell:
        "(date && trycycler subsample --reads {input} --out_dir {params.folder} --genome_size {params.size} --min_read_depth 20 && date) 2> {log.err} > {log.out}"

rule flye:
    input:
        os.path.join(RESULTS_DIR, "subsampledReads/sample_{number}.fastq")
    output:
        folder = temp(directory(os.path.join(RESULTS_DIR, "flye/sample_{number}"))),
        fasta = os.path.join(RESULTS_DIR, "assemblies/flye_sample_{number}.fasta")
    conda:
        os.path.join(ENV_DIR, "flye.yaml")
    log:
        out=os.path.join(RESULTS_DIR, "logs/flye_sample_{number}.out.log"),
        err=os.path.join(RESULTS_DIR, "logs/flye_sample_{number}.err.log")
    threads: 8
    shell:
        """
        (date && flye --nano-hq {input} --out-dir {output.folder} --threads {threads} && 
        cp {output.folder}/assembly.fasta {output.fasta} && 
        date) 2> {log.err} > {log.out}
        """

rule canu:
    input:
        os.path.join(RESULTS_DIR, "subsampledReads/sample_{number}.fastq")
    output:
        folder = temp(directory(os.path.join(RESULTS_DIR, "canu/sample_{number}"))),
        fasta = os.path.join(RESULTS_DIR, "assemblies/canu_sample_{number}.fasta")
    params:
        config["subsample"]["genome_size"]
    conda:
        os.path.join(ENV_DIR, "canu.yaml")
    log:
        out=os.path.join(RESULTS_DIR, "logs/canu_sample_{number}.out.log"),
        err=os.path.join(RESULTS_DIR, "logs/canu_sample_{number}.err.log")    
    threads: 8
    shell:
        """(date && canu -p canu -d {output.folder} genomeSize={params} -nanopore {input} -maxThreads={threads} && 
        cp {output.folder}/canu.contigs.fasta {output.fasta} &&
        date) 2> {log.err} > {log.out}
        """

rule raven:
    input:
        os.path.join(RESULTS_DIR, "subsampledReads/sample_{number}.fastq")
    output:
        fasta=os.path.join(RESULTS_DIR, "assemblies/raven_sample_{number}.fasta")
    log:
        out=os.path.join(RESULTS_DIR, "logs/raven_sample_{number}.out.log"),
        err=os.path.join(RESULTS_DIR, "logs/raven_sample_{number}.err.log")
    conda:
        os.path.join(ENV_DIR, "raven.yaml")
    threads: 8
    shell:
        "(date && raven --threads 8 --disable-checkpoints {input} > {output.fasta} && date) 2> {log.err} > {log.out}"


rule getStats:
    input:
        raven = expand(rules.raven.output.fasta,number = ["03", "06", "09", "12"]),
        canu = expand(rules.canu.output.fasta, number = ["02", "05", "08", "11"]),
        flye = expand(rules.flye.output.fasta,number = ["01", "04", "07", "10"])
    output:
        os.path.join(RESULTS_DIR, "stats/stats_assemblies.txt")
    conda:
        os.path.join(ENV_DIR, "seqkit.yaml")
    threads: 1
    shell:
        "seqkit stats -T -a {input.raven} {input.canu} {input.flye} > {output}"


